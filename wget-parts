#!/usr/bin/perl
use v5.12;

# when dying, exit with 2
$SIG{__DIE__} = sub { $! = 2 };

use LWP::Simple qw($ua);
$ua->conn_cache({ total_capacity => 2 });
$ua->timeout(30);

unlink ".part$$";

$SIG{HUP} =
$SIG{INT} =
$SIG{QUIT} =
$SIG{PIPE} =
$SIG{TERM} = sub {
    unlink ".part$$";
    my $sig = shift;
    delete $SIG{$sig};
    kill $sig => $$;
    exit 143; # cannot happen
};

my $Timeout = 20;
my $Progress = 1<<20;

my $Size = 0;
my $Next = $Size + $Progress;

$SIG{ALRM} = sub {
    if ($Size + -s ".part$$" < $Next) {
	warn "terminating";
	unlink ".part$$";
	exit 124; # like timeout(1)
    }
    $Next = $Size + -s _ + $Progress;
    alarm $Timeout;
};

alarm $Timeout;

use POSIX qw(sigprocmask SIG_BLOCK SIG_SETMASK);
my $sigset_old = POSIX::SigSet->new;
my $sigset_all = POSIX::SigSet->new;
$sigset_all->fillset;

sub readLine () {
    use Fcntl qw(LOCK_EX LOCK_UN);
    # STDIN cannot be locked with flock(2) in this way
    open my $dirfd, "<", "." or die;
    flock $dirfd, LOCK_EX or die "flock: $!";
    defined sigprocmask SIG_BLOCK, $sigset_all, $sigset_old
	or die "sigprocmask: $!";
    undef $_;
    while (sysread STDIN, my $c, 1) {
	if ($c eq "\n") {
	    last if defined;
	}
	else {
	    $_ .= $c;
	}
    }
    sigprocmask SIG_SETMASK, $sigset_old;
    flock $dirfd, LOCK_UN;
    return length > 0;
}

use constant {
    tsPacketSize => 188,
    tsSyncByte => 'G',
};


use Getopt::Long 2.24 qw(GetOptions :config gnu_getopt);
GetOptions hls => \my $opt_hls, dash => \my $opt_dash,
    'user-agent=s' => \my $opt_ua
    or die "getopt failed";
my $dirURL = $ARGV[0] and @ARGV == 1
    or die "Usage: $0 dirURL <parts";
$ua->agent($opt_ua) if $opt_ua;

sub check_ts () {
    open my $fh, "<", ".part$$" or die $!;
    my $n = read $fh, my $p, tsPacketSize;
    while (1) {
	die "read packet" if $n != tsPacketSize;
	return if substr($p, 0, 1) ne tsSyncByte;
	$n = read $fh, $p, tsPacketSize or last;
    }
    die "read: $!" unless defined $n;
    return 1;
}

sub download_chunk ($$) {
    my ($url, $fname) = @_;
    my $right_size;
    $ua->add_handler(response_header => sub {
	my $r = shift;
	$right_size = $r->content_length if $r->code == 200;
    });
    my $r = $ua->get($url, ":content_file" => ".part$$");
    $ua->remove_handler("response_header");
    if ($r->code != 200) {
	warn "$fname: ", $r->status_line;
	return;
    }
    if ($right_size and $right_size < 1 or
	$opt_hls and $right_size % tsPacketSize) {
	warn "$fname: bad expected size: $right_size";
	return;
    }
    my $size = -s ".part$$";
    if (not $size) {
	warn "$fname: empty output";
	return;
    }
    if ($right_size and $size != $right_size or
	$opt_hls and $size % tsPacketSize) {
	warn "$fname: wrong size";
	return;
    }
    if ($opt_hls and not check_ts) {
	warn "$fname: bad sync byte";
	return;
    }
    return $size;
}

my $rc;
my @err; # a window to detect 3 out of 4 errors

while (readLine) {
    chomp;
    my $url = m#^\w+://# ? $_ : "$dirURL/$_";
    s/[?].*//; s/.*\///;
    die "bad part: $_" unless /\w/;
    my $fname = $_;
    next if -s $fname;
    if (my $size = download_chunk $url, $fname) {
	$Size += $size;
	rename ".part$$", $fname or die "$fname: $!";
	push @err, 0;
    }
    else {
	unlink ".part$$";
	$rc = 1;
	push @err, 1;
    }
    shift @err if @err > 4;
    if ((grep $_, @err) >= 3) {
	warn "too many errors";
	exit 3;
    }
}

exit $rc;
