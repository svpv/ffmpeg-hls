#!/bin/bash -efu

wGetO()
{
	wget=("$av0dir"/wget-progress "$1" wget)
	wopt=(--timeout 30 --tries 3 ${UA:+--user-agent="$UA"})
	if ! { "${wget[@]}" "${wopt[@]}" -q -O "$@" && [ -s "$1" ]; }; then
		if [ -n "${http_proxy-}" ]; then
			update-uk-proxy --hls
			. uk_proxy.sh
		fi
		if ! "${wget[@]}" "${wopt[@]}" -nv -O "$@" &>$tmpdir/werr; then
			cat >&2 $tmpdir/werr
			return 1
		fi
		if ! [ -s "$1" ]; then
			echo >&2 "empty wget output"
			return 1
		fi
	fi
}

DoubleCheck()
{
	local url="$1"; shift
	set -- "$1" $tmpdir/out{1,2}
	wGetO "$2" "$url"
	if cmp -s "$1" "$2"; then
		rm "$2"
	else
		wGetO "$3" "$url"
		if cmp -s "$1" "$3"; then
			rm "$2" "$3"
		elif cmp -s "$2" "$3"; then
			echo >&2 "${0##*/}: fixed $1"
			mv "$2" "$1"
			rm "$3"
		else
			echo >&2 "${0##*/}: cannot fix $1"
			rm "$1" "$2" "$3"
			false
		fi
	fi
}

remove_tmpdir()
{
	rm -r "$tmpdir"
	exit $1
}

untrap_tmpdir()
{
	trap - EXIT
	trap - HUP INT QUIT PIPE TERM
}

tmpdir=$(mktemp -dt "${0##*/}.XXXXXXXX")
trap 'exit 143' HUP INT QUIT PIPE TERM
trap 'remove_tmpdir $?' EXIT

av0=$(readlink -ev "$0")
av0dir=$(dirname "$av0")

wGetStats()
{
	local n
	n=$(wc -l <.parts)
	set +f
	while :; do
		set -- *
		if [ "$*" = "*" ]; then
			set --
		fi
		printf '\r%s %*d/%d  ' "${PWD##*/}" ${#n} $# $n
		sleep 1
	done
}

UpdateProxyArgs()
{
	file= excl=()
	local p=$1 loop=$2; shift 2
	local q f=uk_proxy.sh
	for q; do
		if [ $q -gt 1 ]; then
			f=uk_proxy$q.sh
		fi
		if [ $p = $q ]; then
			file=$f
			$loop
		else
			excl+=(--not-file=$f)
		fi
	done
}

UpdateKidProxy()
{
	if [ -n "${http_proxy-}" ]; then
		local file excl
		UpdateProxyArgs "$@"
		update-uk-proxy --hls --file=$file ${excl[@]} ||
		update-uk-proxy --hls --file=$file ${excl[@]} ||
		until update-uk-proxy --file=$file --hls; do :; done
		. "$file"
	fi
}

EOF()
{
	perl -e 'exit(tell STDIN == -s STDIN ? 0 : 1)'
}

Try1()
{
	local p="$1" b="$2"; shift 2
	"$av0dir"/wget-parts --${type:?} ${UA:+--user-agent="$UA"} "$b" && return
	while :; do
		EOF && break
		UpdateKidProxy $p ":" "$@" </dev/null
		EOF && break
		"$av0dir"/wget-parts --${type:?} ${UA:+--user-agent="$UA"} "$b" && break
	done
	return 1
}

ParaTry()
{
	local b1=$1 b2=$2; shift 2
	local p b pids=
	for p; do
		UpdateKidProxy $p "break" "$@" </dev/null
		# use either $b1 or $b2 as base URL
		b=b$((1+($p-1)%2))
		Try1 $p "${!b}" "$@" <&0 &
		pids="$pids $!"
	done
	for p in $pids; do
		wait $p || rc=1
	done
}

wGetParts()
{
	wGetStats &
	local try rc=
	local npara=2
	for try in 1 2 3 4 5; do
		left=$(comm -23 <(perl -pe 's#^\w+://.*/##' .parts |sort) <(ls) |wc -l)
		if [ $left = 0 ]; then
			break
		elif [ $left -lt $npara ]; then
			npara=$left
		fi
		rc=
		local para=$(seq 1 $npara)
		ParaTry "$1" "$2" ${para:?} <.parts
		if [ -z "$rc" ]; then
			break
		fi
		# rotate base URLs
		set -- "$2" "$1"
	done
	kill %1
	wait 2>/dev/null
	return $rc
}

tolera='non-existing SPS 0 referenced in buffering period
SPS unavailable in decode_picture_timing
Application provided invalid, non.monotonically increasing dts to muxer
Invalid timestamps stream=
Last message repeated'

RecheckParts()
{
	local n=0 seg0=
	if [ $type = dash ]; then
		read -r seg0
		seg0=${seg0%%\?*}
		seg0=${seg0##*/}
		if ! [ -s "${seg0:?}" ]; then
			echo >&2 "${0##*/}: missing $seg0 (cannot happen)"
			false
		fi
	fi
	while read -r part; do
		f=$part
		f=${f%%\?*}
		f=${f##*/}
		if ! [ -s "${f:?}" ]; then
			echo >&2 "${0##*/}: missing $f (cannot happen)"
			false
		fi
		if [ "$type" = dash ]; then
			cat "$seg0" "$f" |
			nice -5 ffmpeg -v warning -i - -f null -
		else
			nice -5 ffmpeg -v warning -i "$f" -f null -
		fi </dev/null 2>&1 |
		stdbuf -oL awk -v part=$part '/\w/{$1=$1;print part"\t"$0}' &
		(( ++n < 2 )) || wait -n
	done >$tmpdir/parts.all-errors
	wait
	if grep -v "$tolera" $tmpdir/parts.all-errors >$tmpdir/parts.bad-errors; then
		: got some bad errors, as expected
	else
		echo "${0##*/}: no bad errors in recheck (cannot happen)"
		return 1
	fi
	# preparing for grouping, obliterate numeric details
	perl -ni -le '($part, $_) = split /\t/, $_, 2;
		s/\b0x[0-9a-f]+\b/0x42/g;
		s/ -\d+\b/ 42/g; s/\b\d+\b/42/g;
		print "$part\t$_"' $tmpdir/parts.bad-errors
	# if some error is encountered in more than half of the parts,
	# it's not a real error
	sort -t$'\t' -u -k2,2 -k1,1 -o $tmpdir/parts.bad-errors{,}
	cut -f2 $tmpdir/parts.bad-errors |uniq -c |
		awk -v n=$n '(n==1||$1<=n/2){sub(" +[0-9]+ ","");print}' |
		sort -u >$tmpdir/real-errors
	join -t$'\t' -12 -21 -v1 -o '1.2' $tmpdir/{parts.bad,real}-errors |
		sort -u >$tmpdir/common-errors
	join -t$'\t' -12 -21 -o '1.1 1.2' $tmpdir/{parts.bad,real}-errors |
		sort -u >$tmpdir/parts.real-errors
	cut -f1 $tmpdir/parts.real-errors |uniq >$tmpdir/parts.ck
	# show diagnostics
	if [ -s $tmpdir/common-errors ]; then
		echo "${0##*/}: common errors (will be ignored):"
		cat $tmpdir/common-errors
	fi
	if ! [ -s $tmpdir/parts.ck ]; then
		echo "${0##*/}: no real errors in recheck (cannot happen)"
		return 1
	fi
	echo "${0##*/}: $(wc -l <$tmpdir/parts.ck) part(s) to recheck:"
	perl -n -le '($_, $err) = split /\t/, $_, 2;
		s/[?].*//; s/.*\///;
		print "$_\t$err"' <$tmpdir/parts.real-errors |
		column -s$'\t' -t
	# now recheck
	while read -r part; do
		f=${part##*/}
		[[ $part = *://* ]] || part=${1%/*}/$part
		DoubleCheck "$part" "$f" </dev/null
	done <$tmpdir/parts.ck
}

FixupExamLog()
{
	sed -i 's/\r/\n/g' "$1"
	sed -ni '/\w/p' "$1"
	time=$(sed -n '$s/^\(frame\|size\)=.* time=\([^ ]\+\) .*/\2/p' "$1")
	sed -i '/^\(frame\|size\)=.* time=/d' $1
}

UA=
OUT=
time=
type=
hlsname=
dashopt=()

wGetHLS()
{
	out1=$tmpdir/wget.out1
	wGetO "$out1" "$1"
	ext=
	if [ "$(head -c7 "$out1")" = '#EXTM3U' ]; then
		type=hls ext=m3u8
	elif [ "$(head -c1 "$out1")" = '<' ] && grep -q '<MPD\>' "$out1"; then
		type=dash ext=mpd
	else
		echo "${0##*/}: neither HLS nor DASH"
	fi
	if [ -n "$type" ]; then
		if [[ $1 == $2 ]]; then
			DoubleCheck "$1" "$out1"
		else
			out2=$tmpdir/wget.out2
			wGetO "$out2" "$2"
			if ! cmp -s "$out1" "$out2"; then
				DoubleCheck "$1" "$out1"
				DoubleCheck "$2" "$out2"
			fi
			if ! cmp -s "$out1" "$out2"; then
				echo >&2 "${0##*/}: URLs provide different streams"
				set -- "$1" "$1"
			fi
			rm "$out2"
		fi
		# always hash original m3u - segment names can be very simple,
		# it is the directory name that makes the list of segments unique
		hlsdir=$(sha1sum <"$out1")
		case $hlsname in
			*/*) hlsdir=$hlsname-$type-${hlsdir:0:20} ;;
			 '') hlsdir=${TMPDIR:-/tmp}/$type-${hlsdir:0:20} ;;
			  *) hlsdir=${TMPDIR:-/tmp}/$hlsname-$type-${hlsdir:0:20} ;;
		esac
		mkdir -p "$hlsdir"/.tmp
		cd "$hlsdir"
		mv "$out1" .$ext
		OUT=$PWD/.$ext
		rmdir "$tmpdir"
		untrap_tmpdir
		tmpdir=$PWD/.tmp
	else
		# downloaded something else, will return it within tmpdir
		cd "$tmpdir"
		OUT=$out1
	fi
	if [ -s .valid ]; then
		time=$(cat .valid)
		return 0
	fi
	if [ "$type" = hls ]; then
		perl -pi -e 's/\r/\n/g' .m3u8
		perl -ni -le 'print if /^#EXT/ or /^[^#]/' .m3u8
		perl -pi -e 'BEGIN{$base=shift} s#^\Q$base\E/##' "${1%/*}" .m3u8
		if grep '^[^#]' .m3u8 >.parts; then
			sed -i '/^[^#]/{s/[?].*//;s/.*\///}' .m3u8
			wGetParts "${1%/*}" "${2%/*}"
		else
			echo "${0##*/}: no HLS segments"
			return 1
		fi
	elif [ "$type" = dash ]; then
		"$av0dir"/dash-manifest "${dashopt[@]}" .mpd >$tmpdir/AVparts
		if [ -s $tmpdir/AVparts ]; then
			sed -n 's/^[AV]//p' <$tmpdir/AVparts >.parts
			wGetParts "${1%/*}" "${2%/*}"
		else
			echo "${0##*/}: no DASH segments"
			return 1
		fi
	fi
	ffexam=(nice -5 ffmpeg -v warning -stats)
	if [ "$type" = dash ]; then
	    ffexam+=(-allowed_extensions ALL)
	fi
	rc=
	"${ffexam[@]}" -i "$OUT" -f null - &>$tmpdir/fferr || rc=1
	FixupExamLog $tmpdir/fferr
	if grep -v "$tolera" $tmpdir/fferr >$tmpdir/baderr || [ -n "$rc" ]; then
		echo "${0##*/}: got some errors, rechecking"
	else
		echo "$time" >.valid
		return 0
	fi >&2
	if [ "$type" = hls ]; then
		RecheckParts "$1" <.parts
	elif [ "$type" = dash ]; then
		sed -n 's/^A//p' <$tmpdir/AVparts >$tmpdir/Aparts
		sed -n 's/^V//p' <$tmpdir/AVparts >$tmpdir/Vparts
		[ ! -s $tmpdir/Aparts ] || RecheckParts "$1" <$tmpdir/Aparts
		[ ! -s $tmpdir/Vparts ] || RecheckParts "$1" <$tmpdir/Vparts
	else
		DoubleCheck "$1" "$OUT"
	fi
	rc=
	"${ffexam[@]}" -i "$OUT" -f null - &>$tmpdir/fferr || rc=1
	FixupExamLog $tmpdir/fferr
	# stream still corrupted?
	if grep -v "$tolera" $tmpdir/fferr; then
		echo "${0##*/}: cannot proceed"
		return 1
	elif [ -n "$rc" ]; then
		cat $tmpdir/fferr
		echo "${0##*/}: cannot proceed"
		return 1
	fi >&2
	echo "$time" >.valid
}

argv=$(getopt -n "${0##*/}" -o X -l name:,audio:,video:,user-agent: -- "$@")
eval set -- "$argv"
while :; do
	case "$1" in
		--name)
			hlsname=${2:?}
			shift 2 ;;
		--audio|--video)
			dashopt+=("$1=${2:?}")
			shift 2 ;;
		--user-agent)
			UA=${2:?}
			shift 2 ;;
		--)
			shift
			break ;;
		*)
			echo "${0##*/}: unrecognized option $1" >&2
			exit 1 ;;
	esac
done

wGetHLS "${1:?}" "${2:-$1}" </dev/null >&2
# returning something within tmpdir?
[ -n "$hlsdir" ] || untrap_tmpdir
echo "${time:?}" "${OUT:?}"
