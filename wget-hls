#!/bin/bash -efu

Proxied()
{
	if !	"$@"; then
		if [ -n "${http_proxy-}" ]; then
			update-uk-proxy --hls
			. uk_proxy.sh
		fi
		"$@"
	fi
}

Proxied2()
{
	if !	Proxied "$@"; then
		if [ -n "${http_proxy-}" ]; then
			until update-uk-proxy --hls --recheck; do : recheck; done
			. uk_proxy.sh
		fi
		Proxied "$@"
	fi
}

wGet()
{
	local out=.
	if [ "$1" = -O ]; then
		out=$2
	fi
	wget=("$av0dir"/wget-progress "$out" wget)
	wopt=(--quiet --timeout 20 --tries 3)
	Proxied "${wget[@]}" "${wopt[@]}" "$@"
}

DoubleCheck()
{
	local url="$1"; shift
	set -- "$1" $tmpdir/out{1,2}
	wGet -O "$2" "$url"
	if cmp -s "$1" "$2"; then
		rm "$2"
	else
		wGet -O "$3" "$url"
		if cmp -s "$1" "$3"; then
			rm "$2" "$3"
		elif cmp -s "$2" "$3"; then
			mv "$2" "$1"
			rm "$3"
		else
			rm "$1" "$2" "$3"
			false
		fi
	fi
}

remove_tmpdir()
{
	rm -r "$tmpdir"
	exit $1
}

tmpdir=$(mktemp -dt "${0##*/}.XXXXXXXX")
trap 'exit 143' HUP INT QUIT PIPE TERM
trap 'remove_tmpdir $?' EXIT

av0=$(readlink -ev "$0")
av0dir=$(dirname "$av0")

OUT=
hlsdir=

wGetHLS()
{
	url=$1
	m3u=$tmpdir/hls.out
	wGet -O "$m3u" "$url"
	if [ "$(head -c7 "$m3u")" = '#EXTM3U' ]; then
		DoubleCheck "$url" "$m3u"
		hlsdir=$(sha1sum <"$m3u")
		hlsdir=${TMPDIR:-/tmp}/hls-${hlsdir:0:20}
		mkdir -p "$hlsdir"
		pushd "$hlsdir" >/dev/null
		perl -lne '
			use v5.12;
			our $base;
			BEGIN {
				$base = shift;
			}
			s/\r//g;
			if (m,^http://,) {
				say;
			}
			elsif (m,^[^#],) {
				say "$base/$_";
			}
			' "${url%/*}" <"$m3u" >$tmpdir/parts
		perl -pe 's,^http://.*/,,' "$m3u" >new.m3u
		perl -ne 'print if $. % 2 == 1' $tmpdir/parts >$tmpdir/parts1
		perl -ne 'print if $. % 2 == 0' $tmpdir/parts >$tmpdir/parts2
		Proxied2 "$av0dir"/wget-progress --files-from=$tmpdir/parts1 \
			 "$av0dir"/wget-parts $tmpdir/parts1 &
		Proxied2 "$av0dir"/wget-progress --files-from=$tmpdir/parts2 \
			 "$av0dir"/wget-parts $tmpdir/parts2
		wait $!
		OUT=$PWD/new.m3u
		popd >/dev/null
	else
		# downloaded something else, will return it within tmpdir
		OUT=$m3u
	fi
	if ffmpeg -v error -i "$OUT" -f null - 2>&1 |
	   grep -v 'non-existing SPS 0 referenced in buffering period
Application provided invalid, non.monotonically increasing dts to muxer
Last message repeated'; then
		: need recheck
	else
		return 0
	fi
	if [ "$(head -c7 "$m3u")" = '#EXTM3U' ]; then
		while read -r part; do
			b=${part##*/}
			f=$hlsdir/$b
			[ -f "$f" ]
			ffmpeg -v error -i "$f" -f null - 2>&1 </dev/null |
				awk -v part="$part" '{print part"\t"$0}'
		done <$tmpdir/parts |
			perl -pe 's/ @ 0x[0-9a-f]+\]/]/' |
			sort -t$'\t' -u -k2,2 -k1,1 >$tmpdir/parts.all-errors
		n=$(wc -l <$tmpdir/parts)
		cut -f2 $tmpdir/parts.all-errors |uniq -c |
			awk -v n="$n" '($1<n/2){sub(" +[0-9]+ ","");print}' |
			sort -u >$tmpdir/parts.real-errors
		join -t$'\t' -12 -21 -o 1.1 $tmpdir/parts.{all,real}-errors >$tmpdir/parts.ck
		sort -u -o $tmpdir/parts.ck{,}
		while read -r part; do
			b=${part##*/}
			f=$hlsdir/$b
			[ -f "$f" ]
			DoubleCheck "$part" "$f" </dev/null
		done <$tmpdir/parts.ck
	else
		DoubleCheck "$url" "$m3u"
	fi
}

wGetHLS "${1:?}" >&2
# returning something within tmpdir?
[ -n "$hlsdir" ] || trap - EXIT
echo "${OUT:?}"
